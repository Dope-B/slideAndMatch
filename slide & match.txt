#include <SPFD5408_TouchScreen.h>
#include <SPFD5408_Util.h>
#include <SPFD5408_Adafruit_TFTLCD.h>
#include <SPFD5408_Adafruit_GFX.h>
#include <registers.h>
#include <pin_magic.h>

#if defined(__SAM3X8E__)
#undef __FlashStringHelper::F(string_literal)
#define F(string_literal) string_literal
#endif
#define	BLACK   0x0000
#define	BLUE    0x001F
#define	RED     0xF800
#define	GREEN   0x07E0
#define CYAN    0x07FF
#define MAGENTA 0xF81F
#define YELLOW  0xFFE0
#define WHITE   0xFFFF
#define LCD_CS A3
#define LCD_CD A2
#define LCD_WR A1
#define LCD_RD A0
#define LCD_RESET A4

#define YP A3  // must be an analog pin, use "An" notation!
#define XM A2  // must be an analog pin, use "An" notation!
#define YM 9   // can be a digital pin
#define XP 8   // can be a digital pin


 Adafruit_TFTLCD tft(LCD_CS, LCD_CD, LCD_WR, LCD_RD, LCD_RESET);
 TouchScreen ts = TouchScreen(XP, YP, XM, YM, 300);


 unsigned long current_time;
 unsigned long color_print_time;
 unsigned long fps;
 unsigned long A_term;
 unsigned long start_term;
 int A_SponTerm;
 int point_x;
 int point_y;
 int tri_x;
 int tri_y;
 int current_color=YELLOW;
 int touched_x;
 int touched_y;
 int ex_touched_x;
 int ex_touched_y;
 int num=0;
 int score=0;
 bool is_touched=false;
 bool touch_check_1=false;
 bool FT_touched = false;
 bool color_change = false;
 bool is_start = false;
 bool is_fail=false;
 bool start_print = false;
 int gap_x;
 int gap_y;
 int fail_count;
 byte is_slide;// 1->left 2->right 3->up 4->down 5->none
 byte current_slide;
 TSPoint p;

 int Adirection[8];
 int Acolor[8];
 int Aspeed[8];
 int Aloc_x[8];
 int Aloc_y[8];
 int Aenable[8];

void setup(void) {
	Serial.begin(9600);
	Serial.println(F("Paint!"));
	tft.reset();
	tft.begin(0x9341);
	pinMode(13, OUTPUT);
	tri_x = (tft.width() / 2) - 5;
	tri_y = (tft.height() / 4) + 5;
	tft.setCursor(tft.width() / 2 - 20, 20);
	tft.setTextSize(1);
	tft.setTextColor(BLACK);
	tft.print("score: ");
	tft.fillScreen(WHITE);
	tft.fillRect(1, 1, tft.width() - 2, tft.height() - 2, RED);
	tft.fillRect(5, 5, tft.width() - 10, tft.height() - 10, WHITE);
	tft.setCursor(50, 50 );
	tft.setTextSize(3);
	tft.setTextColor(RED);
	tft.print("Slide");
	tft.setTextColor(BLACK);
	tft.setCursor(90, 80);
	tft.print(" & ");
	tft.setTextColor(BLUE);
	tft.setCursor(100, 110);
	tft.print("Match!");
	tft.setCursor(40,200);
	tft.setTextSize(2);
	tft.setTextColor(BLACK);
	tft.print("Touch to play");
	tft.setCursor(80, 300);
	tft.setTextSize(1);
	tft.print("Made by Dope_B");
	tft.setCursor(40, 200);
	tft.setTextSize(2);
	randomSeed(analogRead(A0));
	A_SponTerm = random(1500, 4000);
}

#define MINPRESSURE 10
#define MAXPRESSURE 1000

void loop()
{	
	p = ts.getPoint();
	isTouching();
	if (!is_start) {
		if (is_touched) {
			is_start = true;
			tft.fillScreen(WHITE);
			tft.drawRect(0, tft.height() / 2, tft.width(), tft.height(), MAGENTA);
			tft.fillRect(1, (tft.height() / 2) + 1, tft.width() - 2, tft.height() - 1, current_color);
			tft.setTextSize(1);
		}
		else {
			if (millis() - start_term > 500) {
				start_term = millis();
				if (start_print) { tft.setCursor(40,200); tft.print("Touch to play"); start_print = false; }
				else { tft.fillRect(40,200, 160, 20, WHITE); start_print = true; }
			}
		}
	}
	else {
		if (!is_fail) {
			arrowSpon();
			if (millis() - fps > 200) {
				fps = millis();
				reset_upper();
				for (int i = 0; i < 8; i++) {
					if (Aenable[i] == true) {
						tft.fillTriangle(Aloc_x[i] - 9, Aloc_y[i] + 9, Aloc_x[i] - 9, Aloc_y[i] - 9, Aloc_x[i] + 9, Aloc_y[i], WHITE);
						arrowTick(i);
						tft.fillTriangle(Aloc_x[i] - 7, Aloc_y[i] + 7, Aloc_x[i] - 7, Aloc_y[i] - 7, Aloc_x[i] + 7, Aloc_y[i], Acolor[i]);
						tft.drawTriangle(Aloc_x[i] - 8, Aloc_y[i] + 8, Aloc_x[i] - 8, Aloc_y[i] - 8, Aloc_x[i] + 8, Aloc_y[i], BLACK);
						arrowCheck(i);
					}
					triangle_print();
				}
			}
			pinMode(XM, OUTPUT);
			pinMode(YP, OUTPUT);
			if (is_touched && !touch_check_1) {
				point_x = map(p.x, 150, 900, tft.width(), 0);
				point_y = map(p.y, 130, 900, 0, tft.height());
				Serial.print("L_x:  ");
				Serial.print(point_x);
				Serial.print("\t");
				Serial.print("L_y:  ");
				Serial.println(point_y);
			}
			slide_check();
			current_color_change();
			current_color_check();
			fail();
		}
		else {
			if (is_touched) {
				is_fail = false;
				tft.fillScreen(WHITE);
				tft.drawRect(0, tft.height() / 2, tft.width(), tft.height(), MAGENTA);
				tft.fillRect(1, (tft.height() / 2) + 1, tft.width() - 2, tft.height() - 1, current_color);
				tft.setTextSize(1);
				fail_count = 0;
				for (int i = 0; i < 8; i++) {
					arrowEnd(i);
				}
				score = 0;
				A_term = millis();
				A_SponTerm = random(2500, 4000);
			}
			else {
				if (millis() - start_term > 500) {
					start_term = millis();
					if (start_print) { tft.setCursor(70, 200); tft.print("Touch to replay"); start_print = false; }
					else { tft.fillRect(70, 200, 160, 20, WHITE); start_print = true; }
				}
			}
		}
	}
}
void slide_check() {
	if ((point_y > (tft.height() / 2) + 1) && (point_y < tft.height() - 1)) {
		if (is_touched && !FT_touched) {
			FT_touched = true;
			Serial.println("start");
			touched_x = point_x;
			touched_y = point_y;
		}
		else if (!is_touched && FT_touched) {
			FT_touched = false;
			ex_touched_x = point_x;
			ex_touched_y = point_y;
			gap_x = touched_x - ex_touched_x;
			gap_y = touched_y - ex_touched_y;
			if (gap_x > 25 && (gap_x>gap_y*2.5)) { is_slide = 2; }
			else if (gap_x < -25 && ((gap_x < gap_y*2.5))) { is_slide = 1; }
			else if (gap_y > 15 && ((gap_x < gap_y*2.5))) { is_slide = 4; }
			else if (gap_y < -15 && ((gap_x > gap_y*2.5))) { is_slide = 3; }
			else { is_slide = 5; }
			/*switch (is_slide)
			{
			case 1:
				Serial.print("p1_x:  ");
				Serial.print(touched_x);
				Serial.print("\t");
				Serial.print("p1_y:  ");
				Serial.println(touched_y);
				Serial.print("p2_x:  ");
				Serial.print(ex_touched_x);
				Serial.print("\t");
				Serial.print("p2_y:  ");
				Serial.println(ex_touched_y);
				Serial.print("x:  ");
				Serial.print(gap_x);
				Serial.print("\t");
				Serial.print("y:  ");
				Serial.print(gap_y);
				Serial.println("\t  left");
				break;
			case 2:
				Serial.print("p1_x:  ");
				Serial.print(touched_x);
				Serial.print("\t");
				Serial.print("p1_y:  ");
				Serial.println(touched_y);
				Serial.print("p2_x:  ");
				Serial.print(ex_touched_x);
				Serial.print("\t");
				Serial.print("p2_y:  ");
				Serial.println(ex_touched_y);
				Serial.print("x:  ");
				Serial.print(gap_x);
				Serial.print("\t");
				Serial.print("y:  ");
				Serial.print(gap_y);
				Serial.println("\t  right");
				break;
			case 3:
				Serial.print("p1_x:  ");
				Serial.print(touched_x);
				Serial.print("\t");
				Serial.print("p1_y:  ");
				Serial.println(touched_y);
				Serial.print("p2_x:  ");
				Serial.print(ex_touched_x);
				Serial.print("\t");
				Serial.print("p2_y:  ");
				Serial.println(ex_touched_y);
				Serial.print("x:  ");
				Serial.print(gap_x);
				Serial.print("\t");
				Serial.print("y:  ");
				Serial.print(gap_y);
				Serial.println("\t  up");
				break;
			case 4:
				Serial.print("p1_x:  ");
				Serial.print(touched_x);
				Serial.print("\t");
				Serial.print("p1_y:  ");
				Serial.println(touched_y);
				Serial.print("p2_x:  ");
				Serial.print(ex_touched_x);
				Serial.print("\t");
				Serial.print("p2_y:  ");
				Serial.println(ex_touched_y);
				Serial.print("x:  ");
				Serial.print(gap_x);
				Serial.print("\t");
				Serial.print("y:  ");
				Serial.print(gap_y);
				Serial.println("\t  down");
				break;
			default:
				Serial.print("p1_x:  ");
				Serial.print(touched_x);
				Serial.print("\t");
				Serial.print("p1_y:  ");
				Serial.println(touched_y);
				Serial.print("p2_x:  ");
				Serial.print(ex_touched_x);
				Serial.print("\t");
				Serial.print("p2_y:  ");
				Serial.println(ex_touched_y);
				Serial.print("x:  ");
				Serial.print(gap_x);
				Serial.print("\t");
				Serial.print("y:  ");
				Serial.print(gap_y);
				Serial.println("\t  none");
				break;
			}*/
			touched_x = NULL;
			touched_y = NULL;
			ex_touched_x = NULL;
			ex_touched_y = NULL;
			point_x = NULL;
			point_y = NULL;
		}
	}

}
void isTouching() {
	
	pinMode(XM, OUTPUT);
	pinMode(YP, OUTPUT);
	if (!color_change) {
		if (touch_check_1) {
			if ((millis() - current_time) < 180) {
				if ((p.z > 10) && (p.x > 5)) {
					touch_check_1 = false;
					is_touched = true;
				}
			}
			else {
				touch_check_1 = false;
				is_touched = false;
			}
		}
		else {
			if ((p.z > MINPRESSURE && p.z < MAXPRESSURE) && (p.x > 5)) {
				is_touched = true;
			}
			else {
				current_time = millis();
				touch_check_1 = true;
			}
		}
	}
	
}
void current_color_check() {
	if (!color_change) {
		
		if ((current_slide != is_slide)&&(is_slide!=5)) {
			switch (is_slide)
			{
			case 1: current_color = RED; num = 1;break;
			case 2: current_color = BLUE; num = tft.width() - 2; break;
			case 3: current_color = YELLOW; num = (tft.height() / 2) + 1; break;
			case 4: current_color = GREEN; num = (tft.height() - 1); break;
			default:break;
			}
			current_slide = is_slide;
			color_change = true;
		}
	}
}
void current_color_change() {
	if (color_change) {
			switch (is_slide)
			{
			case 1:
				tft.fillRect(min(num, tft.width() - 2), (tft.height() / 2) + 1, 10, tft.height() - 1, current_color);
				if (num >= tft.width() - 2) {
					num = 1;
					color_change = false;
					tft.fillRect(1, (tft.height() / 2) + 1, num, tft.height() - 1, current_color);
				}
				else { num += 10; num = min(num, tft.width() - 2); }
				break;
			case 2:
				tft.fillRect(max(num- 10, 1), (tft.height() / 2) + 1, 10, tft.height() - 1, current_color);
				if (num <= 1) {
					num = tft.width() - 2;
				color_change = false;
				tft.fillRect(num, (tft.height() / 2) + 1, tft.width() - 2, tft.height() - 1, current_color);
				}
				else { num -= 10; num = max(num, 1); }
				break;
			case 3:
				tft.fillRect(1, min(num, (tft.height()) - 1), tft.width() - 2, 5, current_color);
				if (num >= (tft.height() - 1)) {
					num = (tft.height() / 2) + 1;
					color_change = false;
					tft.fillRect(1, (tft.height() / 2) + 1, tft.width() - 2, num, current_color);
				}
				else { num += 5; min(num, (tft.height()) - 1); }
				break;
			case 4:
				tft.fillRect(1, max(num, (tft.height() / 2) + 1), tft.width() - 2, 5, current_color);
				if (num <= (tft.height() / 2) + 1) {
					num = (tft.height() - 1);
					color_change = false;
					tft.fillRect(1, num, tft.width() - 2, tft.height() - 1, current_color);
				}
				else { num -= 5; max(num, (tft.height() / 2) + 1); }
				break;
			default:break;
			}
	}
}
void triangle_print() {
	tft.fillTriangle(tri_x-7, tri_y+7, tri_x-7, tri_y -7, tri_x + 7, tri_y, current_color);
	tft.drawTriangle(tri_x-8, tri_y+8, tri_x-8, tri_y - 8, tri_x + 8, tri_y, BLACK);
}
void reset_upper() {
	tft.fillRect(40, 0, tft.width()-40, 30, WHITE);
	tft.fillRect(10, 20, 30, 20, WHITE);
	tft.setCursor(tft.width() / 2 - 40, 20);
	tft.print("score: ");
	tft.print(score);
	tft.setCursor(10, 20);
	tft.print("life: ");
	tft.print(8-fail_count);
}
void fail() {
	if (fail_count >= 8) {
		is_fail = true;
		tft.fillScreen(WHITE);
		tft.fillRect(1, 1, tft.width() - 2, tft.height() - 2, BLUE);
		tft.fillRect(5, 5, tft.width() - 10, tft.height() - 10, WHITE);
		tft.setCursor(60, 50);
		tft.setTextSize(3);
		tft.setTextColor(BLACK);
		tft.print("Opps..");
		tft.setCursor(85, 90);
		tft.setTextColor(RED);
		tft.print("Fail");
		tft.setTextColor(BLACK);
		tft.setTextSize(1);
	}
}
void arrowSpon() {
	if (millis() - A_term > A_SponTerm) {
		if (score > 200) {
			A_SponTerm = random(1000, 2000);
		}
		else {
			A_SponTerm = random(2500, 4000);
		}
		A_term = millis();
		for (int i = 0; i < 8; i++) {
			if (Aenable[i] == false) {
				Aenable[i] = true;
				Serial.println(i);
				arrowenable(i);
				break;
			}
		}
	}	
}
void arrowenable(int i) {
	Acolor[i] = random(4);
	switch (Acolor[i])
	{
	case 0:
		Acolor[i] = RED;
		break;
	case 1:
		Acolor[i] = BLUE;
		break;
	case 2:
		Acolor[i] = GREEN;
		break;
	default:
		Acolor[i] = YELLOW;
		break;
	}
	Adirection[i] = random(4);// 0-> left 1->right 2->up 3->down
	switch (Adirection[i])
	{
	case 0:
		Aloc_x[i] = 240;
		Aloc_y[i] = 85;
		break;
	case 1:
		Aloc_x[i] = 0;
		Aloc_y[i] = 85;
		break;
	case 2:
		Aloc_x[i] = tri_x;
		Aloc_y[i] = 150;
		break;
	default:
		Aloc_x[i] = tri_x;
		Aloc_y[i] = 0;
		break;
	}
	if (score < 1000) {
		Aspeed[i] = random(2, 4);
	}
	else {
		Aspeed[i] = random(2, 10);
	}
}
void arrowTick(int i) {
	switch (Adirection[i])
	{
	case 0:
		Aloc_x[i] -= Aspeed[i];
		Aloc_x[i] = max(Aloc_x[i], 115);
		break;
	case 1:
		Aloc_x[i] += Aspeed[i];
		Aloc_x[i] = min(Aloc_x[i], 115);
		break;
	case 2:
		Aloc_y[i] -= Aspeed[i]/2+1;
		Aloc_y[i] = max(Aloc_y[i], 85);
		break;
	default:
		Aloc_y[i] += Aspeed[i]/2+1;
		Aloc_y[i] = min(Aloc_y[i], 85);
		break;
	}
}
void arrowCheck(int i) {
	switch (Adirection[i])
	{
	case 0:
		if (Aloc_x[i] <= 115) {
			Aloc_x[i] = 115;
			if (Acolor[i] == current_color) {
				score += 20;
			}
			else {
				fail_count += 1;
			}
			arrowEnd(i);
		}
		break;
	case 1:
		if (Aloc_x[i] >= 115) {
			Aloc_x[i] = 115;
			if (Acolor[i] == current_color) {
				score += 20;
			}
			else {
				fail_count += 1;
			}
			arrowEnd(i);
		}
		break;
	case 2:
		if (Aloc_y[i] <= 85) {
			Aloc_y[i] = 85;
			if (Acolor[i] == current_color) {
				score += 20;

			}
			else {
				fail_count += 1;
			}
			arrowEnd(i);
		}
		break;
	default:
		if (Aloc_y[i] >= 85) {
			Aloc_y[i] = 85;
			if (Acolor[i] == current_color) {
				score += 20;
			}
			else {
				fail_count += 1;
			}
			arrowEnd(i);
		}
		break;
	}
}
void arrowEnd(int i) {
	Acolor[i] = NULL;
	Adirection[i] = NULL;
	Aloc_x[i] = NULL;
	Aloc_y[i] = NULL;
	Aspeed[i] = NULL;
	Aenable[i] = false;
	arrowenable(i);
}
void arrowRender() {
	for (int i = 0; i < 8; i++) {
		if (Aenable[i] == true) {
			tft.fillTriangle(Aloc_x[i] - 9, Aloc_y[i] + 9, Aloc_x[i] - 9, Aloc_y[i] - 9, Aloc_x[i] + 9, Aloc_y[i], WHITE);
			arrowTick(i);
			tft.fillTriangle(Aloc_x[i] - 7, Aloc_y[i] + 7, Aloc_x[i] - 7, Aloc_y[i] - 7, Aloc_x[i] + 7, Aloc_y[i], Acolor[i]);
			tft.drawTriangle(Aloc_x[i] - 8, Aloc_y[i] + 8, Aloc_x[i] - 8, Aloc_y[i] - 8, Aloc_x[i] + 8, Aloc_y[i], BLACK);
			arrowCheck(i);
		}
		triangle_print();
	}
}